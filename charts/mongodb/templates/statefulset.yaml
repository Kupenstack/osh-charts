{{/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/}}

{{- if .Values.manifests.statefulset }}
{{- $envAll := . }}

{{- $serviceAccountName := "mongodb" }}
{{ tuple $envAll "mongodb" $serviceAccountName | include "helm-toolkit.snippets.kubernetes_pod_rbac_serviceaccount" }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb
  annotations:
    {{ tuple $envAll | include "helm-toolkit.snippets.release_uuid" }}
  labels:
{{ tuple $envAll "mongodb" "server" | include "helm-toolkit.snippets.kubernetes_metadata_labels" | indent 4 }}
spec:
  serviceName: {{ tuple "mongodb" "internal" . | include "helm-toolkit.endpoints.hostname_short_endpoint_lookup" }}
  replicas: {{ .Values.pod.replicas.server }}
  selector:
    matchLabels:
{{ tuple $envAll "mongodb" "server" | include "helm-toolkit.snippets.kubernetes_metadata_labels" | indent 6 }}
  template:
    metadata:
      labels:
{{ tuple $envAll "mongodb" "server" | include "helm-toolkit.snippets.kubernetes_metadata_labels" | indent 8 }}
      annotations:
{{ tuple $envAll | include "helm-toolkit.snippets.release_uuid" | indent 8 }}
        configmap-bin-hash: {{ tuple "configmap-bin.yaml" . | include "helm-toolkit.utils.hash" }}
    spec:
      serviceAccountName: {{ $serviceAccountName }}
      affinity:
{{ tuple $envAll "mongodb" "server" | include "helm-toolkit.snippets.kubernetes_pod_anti_affinity" | indent 8 }}
      nodeSelector:
        {{ .Values.labels.server.node_selector_key }}: {{ .Values.labels.server.node_selector_value }}
      initContainers:
{{ tuple $envAll "mongodb" list | include "helm-toolkit.snippets.kubernetes_entrypoint_init_container" | indent 8 }}
{{- if $envAll.Values.volume.chown_on_start }}
        - name: mongodb-perms
{{ tuple $envAll "mongodb" | include "helm-toolkit.snippets.image" | indent 10 }}
          securityContext:
            runAsUser: 0
{{ tuple $envAll $envAll.Values.pod.resources.server | include "helm-toolkit.snippets.kubernetes_resources" | indent 10 }}
          command:
            - chown
            - -R
            - "mongodb:"
            - {{ $envAll.Values.volume.host.host_path }}
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: mongodb-data
              mountPath: {{ $envAll.Values.volume.host.host_path }}
{{- end }}
      containers:
        - name: mongodb
{{ tuple $envAll "mongodb" | include "helm-toolkit.snippets.image" | indent 10 }}
          ports:
            - containerPort: {{ tuple "mongodb" "internal" "mongodb" . | include "helm-toolkit.endpoints.endpoint_port_lookup" }}
          env:
            - name: ADMIN_PASS
              valueFrom:
                secretKeyRef:
                  name: mongodb-root-creds
                  key: MONGODB_ROOT_PASSWORD
            - name: ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: mongodb-root-creds
                  key: MONGODB_ROOT_USERNAME
          command:
            - /tmp/start.sh
          livenessProbe:
            exec:
              command:
              - mongo
              - --eval
              - "db.adminCommand('ping')"
            initialDelaySeconds: 20
            timeoutSeconds: 5
          readinessProbe:
            exec:
              command:
              - mongo
              - --eval
              - "db.adminCommand('ping')"
            initialDelaySeconds: 20
            timeoutSeconds: 5
{{ tuple $envAll $envAll.Values.pod.resources.server | include "helm-toolkit.snippets.kubernetes_resources" | indent 10 }}
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: mongodb-bin
              mountPath: /tmp/start.sh
              subPath: start.sh
              readOnly: true
            - name: mongodb-bin
              mountPath: /tmp/setup_admin_user.sh
              subPath: setup_admin_user.sh
              readOnly: true
            - name: mongodb-data
              mountPath: /data/db
      volumes:
        - name: pod-tmp
          emptyDir: {}
        - name: mongodb-bin
          configMap:
            name: mongodb-bin
            defaultMode: 0555
{{- if not .Values.volume.enabled }}
        - name: mongodb-data
          hostPath:
            path: {{ .Values.volume.host_path }}
{{- else }}
  volumeClaimTemplates:
    - metadata:
        name: mongodb-data
        annotations:
          {{ .Values.volume.class_path }}: {{ .Values.volume.class_name }}
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: {{ .Values.volume.size }}
{{- end }}
{{- end }}
